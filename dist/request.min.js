!function(I){function g(A){if(C[A])return C[A].exports;var n=C[A]={i:A,l:!1,exports:{}};return I[A].call(n.exports,n,n.exports,g),n.l=!0,n.exports}var C={};return g.m=I,g.c=C,g.i=function(I){return I},g.d=function(I,g,C){Object.defineProperty(I,g,{configurable:!1,enumerable:!0,get:C})},g.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},g.p="",g(g.s=4)}([/*!********************!*\
  !*** ./request.js ***!
  \********************/
function(module,exports){"use strict";eval("\"use strict\";\nfunction buildHttpMethodFunction(method) {\n    /**\n     * make http request user fetch API.\n     * if path param is a complete url then fetch ues path as url,\n     * else path is not a complete url string but just a path then fetch url=requestConfig.baseURL+path\n     * url string will been auto revised, etc: http://localhost/api//user///id/ will convert to http://localhost/api/user/id\n     * @param path url path\n     */\n    function httpRequest(path) {\n        var url = path;\n        if (!/^https?:\\/\\/.+$/g.test(path)) {\n            url = exports.requestConfig.baseURL + '/' + path;\n        }\n        url = url.replace(/\\/{2,}/g, '/').replace(/:\\//g, '://');\n        return new Request({ url: url, method: method });\n    }\n    return httpRequest;\n}\n/**\n * Object.assign like function to assign fetch options\n * @param args\n * @returns {SpringRequestInit}\n */\nfunction assignFetchOption() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    var orgOption = args[0];\n    if (args.length > 1) {\n        for (var i = 1; i < args.length; i++) {\n            var options = args[i];\n            for (var key in options) {\n                if (options.hasOwnProperty(key)) {\n                    if (key == 'headers') {\n                        for (var key_1 in options.headers) {\n                            if (options.headers.hasOwnProperty(key_1)) {\n                                orgOption.headers[key_1] = options.headers[key_1];\n                            }\n                        }\n                    }\n                    else {\n                        orgOption[key] = options[key];\n                    }\n                }\n            }\n        }\n    }\n    return orgOption;\n}\nvar Request = (function () {\n    /**\n     * @param fetchOptions\n     */\n    function Request(fetchOptions) {\n        /**\n         * store fetch options\n         */\n        this.options = {\n            headers: {}\n        };\n        /**\n         * has this request been send\n         */\n        this.hasSend = false;\n        /**\n         * The Response interface of the Fetch API represents the response to a request.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Response\n         */\n        this.response = null;\n        /**\n         * if error happen during request error will store in there,else this will be null\n         */\n        this.error = null;\n        assignFetchOption(this.options, exports.requestConfig.globalFetchOptions, fetchOptions);\n    }\n    /**\n     * reset query param in request url by append ? and query param to end of url\n     * @param obj\n     */\n    Request.prototype.queryParam = function (obj) {\n        if (obj != null) {\n            var arr = [];\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    arr.push(key + \"=\" + obj[key]);\n                }\n            }\n            this.options.url = this.options.url.split('?')[0] + '?' + arr.join('&');\n        }\n        return this;\n    };\n    /**\n     * set request body use json\n     * HTTP Header Content-Type will set as application/json\n     * @param obj\n     */\n    Request.prototype.jsonBody = function (obj) {\n        this.options.body = JSON.stringify(obj);\n        this.options.headers['Content-Type'] = 'application/json';\n        return this;\n    };\n    /**\n     * set request body as form type\n     * parse obj to form string\n     * HTTP Header Content-Type will set as application/x-www-form-urlencoded\n     * @param obj\n     */\n    Request.prototype.formBody = function (obj) {\n        var arr = [];\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                arr.push(key + \"=\" + obj[key]);\n            }\n        }\n        this.options.body = arr.join('&');\n        this.options.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n        return this;\n    };\n    /**\n     * send fetch request\n     * get response's data\n     * resolve:\n     *      if response content-type is null,then resolve null\n     *      if response content-type has string json,then read response data as json and resolve pure json\n     *      else read response data as text and resolve plain text\n     */\n    Request.prototype.send = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (_this.hasSend) {\n                if (_this.error == null) {\n                    resolve(_this.responseData);\n                }\n                else {\n                    reject(_this.error);\n                }\n            }\n            else {\n                _this.hasSend = true;\n                var fetchStartHook = exports.requestConfig.fetchStartHook, fetchEndHook_1 = exports.requestConfig.fetchEndHook;\n                fetchStartHook && fetchStartHook(_this);\n                fetch(_this.options.url, _this.options).then(function (response) {\n                    _this.response = response;\n                    var contentType = response.headers.get('content-type');\n                    if (contentType == null) {\n                        return Promise.resolve();\n                    }\n                    else {\n                        if (/.*json.*/.test(contentType)) {\n                            //noinspection JSUnresolvedFunction\n                            return response.json();\n                        }\n                        else {\n                            return response.text();\n                        }\n                    }\n                }).then(function (data) {\n                    _this.responseData = data;\n                    if (_this.response.ok) {\n                        return Promise.resolve(data);\n                    }\n                    else {\n                        return Promise.reject(data);\n                    }\n                }).then(function (data) {\n                    fetchEndHook_1 && fetchEndHook_1(_this);\n                    resolve(data);\n                }).catch(function (err) {\n                    _this.error = err;\n                    fetchEndHook_1 && fetchEndHook_1(_this);\n                    reject(_this);\n                });\n            }\n        });\n    };\n    /**\n     * send request follow _links's href\n     * resolve:\n     *      if response content-type is null,then resolve null\n     *      if response content-type has string json,then read response data as json and resolve pure json\n     *      else read response data as text and resolve plain text\n     */\n    Request.prototype.follow = function (keys) {\n        var _this = this;\n        var self = this;\n        return new Promise(function (resolve, reject) {\n            function doFollow(data) {\n                var key = keys.shift();\n                if (key) {\n                    var links = data['_links'];\n                    var url = links[key];\n                    if (url != null) {\n                        url = url['href'];\n                        exports.get(url).send().then(function (data) {\n                            doFollow(data);\n                        }).catch(function (self) {\n                            reject(self);\n                        });\n                    }\n                    else {\n                        self.error = \"no key=\" + key + \" in links \" + JSON.stringify(links, null, 4);\n                        reject(this);\n                    }\n                }\n                else {\n                    resolve(data);\n                }\n            }\n            _this.send().then(function (data) {\n                doFollow(data);\n            }).catch(function (self) {\n                reject(self);\n            });\n        });\n    };\n    return Request;\n}());\nexports.Request = Request;\nexports.requestConfig = {\n    globalFetchOptions: {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n    },\n    baseURL: '/',\n    fetchStartHook: null,\n    fetchEndHook: null\n};\n/**\n * make http get request\n * @param path url path\n */\nexports.get = buildHttpMethodFunction('GET');\n/**\n * make http post request\n * @param path url path\n */\nexports.post = buildHttpMethodFunction('POST');\n/**\n * make http patch request\n * @param path url path\n */\nexports.patch = buildHttpMethodFunction('PATCH');\n/**\n * make http put request\n * @param path url path\n */\nexports.put = buildHttpMethodFunction('PUT');\n//noinspection ReservedWordAsName\n/**\n * make http remove request\n * @param path url path\n */\nexports.deleteMethod = buildHttpMethodFunction('DELETE');\n/**\n * mockRequest a request with data\n * @param {object} data\n */\nfunction mockRequest(data) {\n    var url = data['_links']['self']['href'];\n    var req = new Request({ url: url, method: 'GET' });\n    req.responseData = data;\n    req.hasSend = true;\n    return req;\n}\nexports.mockRequest = mockRequest;\n//# sourceMappingURL=request.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},,,,/*!*********************!*\
  !*** multi request ***!
  \*********************/
function(I,g,C){I.exports=C(/*! ./request.js */0)}]);