!function(g){function I(A){if(C[A])return C[A].exports;var n=C[A]={i:A,l:!1,exports:{}};return g[A].call(n.exports,n,n.exports,I),n.l=!0,n.exports}var C={};return I.m=g,I.c=C,I.i=function(g){return g},I.d=function(g,I,C){Object.defineProperty(g,I,{configurable:!1,enumerable:!0,get:C})},I.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},I.p="",I(I.s=5)}([/*!********************!*\
  !*** ./request.js ***!
  \********************/
function(module,exports){"use strict";eval("\"use strict\";\nfunction buildHttpMethodFunction(method) {\n    /**\n     * make http request user fetch API.\n     * if path param is a complete url then fetch ues path as url,\n     * else path is not a complete url string but just a path then fetch url=requestConfig.baseURL+path\n     * url string will been auto revised, etc: http://localhost/api//user///id/ will convert to http://localhost/api/user/id\n     * @param path url path\n     */\n    function httpRequest(path) {\n        var url = path;\n        if (!/^https?:\\/\\/.+$/g.test(path)) {\n            url = exports.requestConfig.baseURL + '/' + path;\n        }\n        url = url.replace(/\\/{2,}/g, '/').replace(/:\\//g, '://');\n        return new Request({ url: url, method: method });\n    }\n    return httpRequest;\n}\nvar Request = (function () {\n    /**\n     * @param fetchOptions\n     */\n    function Request(fetchOptions) {\n        /**\n         * store fetch options\n         */\n        this.options = {\n            headers: {}\n        };\n        /**\n         * has this request been send\n         */\n        this.hasSend = false;\n        /**\n         * The Response interface of the Fetch API represents the response to a request.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Response\n         */\n        this.response = null;\n        /**\n         * if error happen during request error will store in there,else this will be null\n         */\n        this.error = null;\n        Object.assign(this.options, exports.requestConfig.globalFetchOptions, fetchOptions);\n    }\n    /**\n     * reset query param in request url by append ? and query param to end of url\n     * @param obj\n     */\n    Request.prototype.queryParam = function (obj) {\n        if (obj != null) {\n            var arr = [];\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    arr.push(key + \"=\" + obj[key]);\n                }\n            }\n            this.options.url = this.options.url.split('?')[0] + '?' + arr.join('&');\n        }\n        return this;\n    };\n    /**\n     * set request body use json\n     * HTTP Header Content-Type will set as application/json\n     * @param obj\n     */\n    Request.prototype.jsonBody = function (obj) {\n        this.options.body = JSON.stringify(obj);\n        this.options.headers['Content-Type'] = 'application/json';\n        return this;\n    };\n    /**\n     * set request body as form type\n     * parse obj to form string\n     * HTTP Header Content-Type will set as application/x-www-form-urlencoded\n     * @param obj\n     */\n    Request.prototype.formBody = function (obj) {\n        var arr = [];\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                arr.push(key + \"=\" + obj[key]);\n            }\n        }\n        this.options.body = arr.join('&');\n        this.options.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n        return this;\n    };\n    /**\n     * send fetch request\n     * get response's data\n     * resolve:\n     *      if response content-type is null,then resolve null\n     *      if response content-type has string json,then read response data as json and resolve pure json\n     *      else read response data as text and resolve plain text\n     */\n    Request.prototype.send = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (_this.hasSend) {\n                if (_this.error == null) {\n                    resolve(_this.responseData);\n                }\n                else {\n                    reject(_this.error);\n                }\n            }\n            else {\n                _this.hasSend = true;\n                var fetchStartHook = exports.requestConfig.fetchStartHook, fetchEndHook_1 = exports.requestConfig.fetchEndHook;\n                fetchStartHook && fetchStartHook(_this);\n                fetch(_this.options.url, _this.options).then(function (response) {\n                    _this.response = response;\n                    var contentType = response.headers.get('content-type');\n                    if (contentType == null) {\n                        return Promise.resolve();\n                    }\n                    else {\n                        if (/.*json.*/.test(contentType)) {\n                            //noinspection JSUnresolvedFunction\n                            return response.json();\n                        }\n                        else {\n                            return response.text();\n                        }\n                    }\n                }).then(function (data) {\n                    _this.responseData = data;\n                    if (_this.response.ok) {\n                        return Promise.resolve(data);\n                    }\n                    else {\n                        return Promise.reject(data);\n                    }\n                }).then(function (data) {\n                    fetchEndHook_1 && fetchEndHook_1(_this);\n                    resolve(data);\n                }).catch(function (err) {\n                    _this.error = err;\n                    fetchEndHook_1 && fetchEndHook_1(_this);\n                    reject(_this);\n                });\n            }\n        });\n    };\n    /**\n     * send request follow _links's href\n     * resolve:\n     *      if response content-type is null,then resolve null\n     *      if response content-type has string json,then read response data as json and resolve pure json\n     *      else read response data as text and resolve plain text\n     */\n    Request.prototype.follow = function (keys) {\n        var _this = this;\n        var self = this;\n        return new Promise(function (resolve, reject) {\n            function doFollow(data) {\n                var key = keys.shift();\n                if (key) {\n                    var links = data['_links'];\n                    var url = links[key];\n                    if (url != null) {\n                        url = url['href'];\n                        exports.get(url).send().then(function (data) {\n                            doFollow(data);\n                        }).catch(function (self) {\n                            reject(self);\n                        });\n                    }\n                    else {\n                        self.error = \"no key=\" + key + \" in links \" + JSON.stringify(links, null, 4);\n                        reject(this);\n                    }\n                }\n                else {\n                    resolve(data);\n                }\n            }\n            _this.send().then(function (data) {\n                doFollow(data);\n            }).catch(function (self) {\n                reject(self);\n            });\n        });\n    };\n    return Request;\n}());\nexports.Request = Request;\nexports.requestConfig = {\n    globalFetchOptions: {},\n    baseURL: '/',\n    fetchStartHook: null,\n    fetchEndHook: null\n};\n/**\n * make http get request\n * @param path url path\n */\nexports.get = buildHttpMethodFunction('GET');\n/**\n * make http post request\n * @param path url path\n */\nexports.post = buildHttpMethodFunction('POST');\n/**\n * make http patch request\n * @param path url path\n */\nexports.patch = buildHttpMethodFunction('PATCH');\n/**\n * make http put request\n * @param path url path\n */\nexports.put = buildHttpMethodFunction('PUT');\n//noinspection ReservedWordAsName\n/**\n * make http remove request\n * @param path url path\n */\nexports.deleteMethod = buildHttpMethodFunction('DELETE');\n/**\n * mockRequest a request with data\n * @param {object} data\n */\nfunction mockRequest(data) {\n    var url = data['_links']['self']['href'];\n    var req = new Request({ url: url, method: 'GET' });\n    req.responseData = data;\n    req.hasSend = true;\n    return req;\n}\nexports.mockRequest = mockRequest;\n//# sourceMappingURL=request.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},/*!******************!*\
  !*** ./index.js ***!
  \******************/
function(module,exports,__webpack_require__){"use strict";eval('"use strict";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n__export(__webpack_require__(/*! ./request */ 0));\n__export(__webpack_require__(/*! ./entity */ 3));\n//# sourceMappingURL=index.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2luZGV4LmpzPzI2NDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuX19leHBvcnQocmVxdWlyZSgnLi9yZXF1ZXN0JykpO1xuX19leHBvcnQocmVxdWlyZSgnLi9lbnRpdHknKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=')},/*!********************!*\
  !*** ./browser.js ***!
  \********************/
function(module,exports,__webpack_require__){"use strict";eval("\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nvar spring = __webpack_require__(/*! ./index */ 1);\nwindow['spring'] = spring;\n__export(__webpack_require__(/*! ./index */ 1));\n//# sourceMappingURL=browser.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Jyb3dzZXIuanM/ODU0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG52YXIgc3ByaW5nID0gcmVxdWlyZSgnLi9pbmRleCcpO1xud2luZG93WydzcHJpbmcnXSA9IHNwcmluZztcbl9fZXhwb3J0KHJlcXVpcmUoJy4vaW5kZXgnKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=")},/*!*******************!*\
  !*** ./entity.js ***!
  \*******************/
function(module,exports,__webpack_require__){"use strict";eval("\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar request = __webpack_require__(/*! ./request */ 0);\nexports.entityConfig = {\n    restBaseURL: '/'\n};\n/**\n * any is an instanceof Entity\n * @param any\n * @returns {boolean}\n */\nfunction isEntity(any) {\n    if (any instanceof Object) {\n        var prototype = any.constructor.prototype.__proto__;\n        while (prototype instanceof Object) {\n            if (prototype.constructor === Entity) {\n                return true;\n            }\n            else {\n                prototype = prototype.__proto__;\n            }\n        }\n    }\n    return false;\n}\nexports.isEntity = isEntity;\n/**\n * object deep equal,optimize for Entity\n * @param a\n * @param b\n * @returns {boolean} is equal ?\n */\nfunction equal(a, b) {\n    if (typeof a === typeof b) {\n        if (isEntity(a) && isEntity(b)) {\n            if (a.id == b.id) {\n                return true;\n            }\n            else {\n                return equal(a.data(), b.data());\n            }\n        }\n        else if (Array.isArray(a) && Array.isArray(b)) {\n            if (a.length === b.length) {\n                var re_1 = true;\n                a.forEach(function (aV, i) {\n                    re_1 = re_1 && equal(aV, b[i]);\n                });\n                return re_1;\n            }\n        }\n        else if ((a instanceof Object) && (b instanceof Object)) {\n            for (var key in a) {\n                var re = true;\n                if (a.hasOwnProperty(key) && b.hasOwnProperty(key)) {\n                    re = re && equal(a[key], b[key]);\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n        else {\n            return a == b;\n        }\n    }\n    return false;\n}\nexports.equal = equal;\nvar Entity = (function () {\n    /**\n     * mock an entity instance with init data\n     * @param initData\n     */\n    function Entity(initData) {\n        /**\n         * store one entity's data\n         */\n        this._data = {};\n        /**\n         * track modify field\n         */\n        this.modifyFields = [];\n        this.patchData(initData);\n    }\n    /**\n     * get this entity's spring data rest resource uri.\n     * if this entity's has data and data has _link properties,use _data['_links']['self']['href']\n     * else use config.restBaseURL + entityName + '/' + self.id\n     */\n    Entity.prototype.href = function () {\n        var links = this._data['_links'];\n        if (links != null) {\n            return links['self']['href'];\n        }\n        else {\n            if (this.id) {\n                return this.constructor.entityBaseURL() + \"/\" + this.id;\n            }\n            else {\n                throw new Error(\"entity without id can't map to backend service:\\n\" + JSON.stringify(this));\n            }\n        }\n    };\n    /**\n     * get entity properties value by key\n     * @param key properties name\n     */\n    Entity.prototype.get = function (key) {\n        return this._data[key];\n    };\n    /**\n     * set entity properties value by key\n     * will compare olaValue and newValue,if value is equal then not append filed name to modifyFields\n     * @param key properties name\n     * @param value\n     */\n    Entity.prototype.set = function (key, value) {\n        var oldValue = this.get(key);\n        if (!equal(oldValue, value)) {\n            this.modifyFields.push(key);\n        }\n        this._data[key] = value;\n    };\n    /**\n     * get entity data ref\n     */\n    Entity.prototype.data = function () {\n        return this._data;\n    };\n    /**\n     * assign a patchData object to entity's properties\n     * if patchData has self link, then id will update by parseIdFromData\n     * @param patchData\n     */\n    Entity.prototype.patchData = function (patchData) {\n        for (var key in patchData) {\n            if (patchData.hasOwnProperty(key)) {\n                this.set(key, patchData[key]);\n            }\n        }\n        try {\n            var id = patchData['_links']['self']['href'].split(/\\//);\n            id = id[id.length - 1];\n            if (id != null) {\n                this.id = id;\n            }\n        }\n        catch (_) {\n        }\n    };\n    /**\n     * create an new entity\n     * send HTTP POST request to create an entity\n     */\n    Entity.prototype.create = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.constructor.translateRelationEntity(_this.data()).then(function (body) {\n                return request.post(_this.constructor.entityBaseURL()).jsonBody(body).send();\n            }).then(function (json) {\n                _this.patchData(json);\n                _this.modifyFields = [];\n                resolve(json);\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n    };\n    /**\n     * update an entity\n     * send HTTP PATCH request to update an entity(will watch change in data properties to track change fields)\n     * @returns {Promise} resolve(json), reject(Request)\n     * @private\n     */\n    Entity.prototype.update = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var pureChange = {};\n            if (_this.modifyFields.length == 0) {\n                resolve();\n                return;\n            }\n            _this.modifyFields.forEach(function (key) {\n                if (pureChange.hasOwnProperty(key) || key[0] === '_') {\n                    return;\n                }\n                else if (_this._data.hasOwnProperty(key)) {\n                    pureChange[key] = _this.get(key);\n                }\n            });\n            _this.constructor.translateRelationEntity(pureChange).then(function (json) {\n                return request.patch(_this.href()).jsonBody(json).send();\n            }).then(function (json) {\n                _this.patchData(json);\n                _this.modifyFields = [];\n                resolve(json);\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n    };\n    /**\n     * create or update entity\n     * if id properties is set update change to service,\n     * else create an new entity to service.\n     *\n     * if entity.properties is an instance of Entity or Entity[],then entity.properties.save() will also call,which mean entity's all Entity attr will auto save()\n     */\n    Entity.prototype.save = function () {\n        if (this.id != null) {\n            return this.update();\n        }\n        else {\n            return this.create();\n        }\n    };\n    /**\n     * remove this entity\n     */\n    Entity.prototype.remove = function () {\n        return this.constructor.remove(this.id);\n    };\n    /**\n     * fetch entity data to keep updated to newest\n     * @returns {Promise} resolve(json), reject(Request)\n     */\n    Entity.prototype.fetch = function () {\n        var _this = this;\n        return new Promise(function (resole, reject) {\n            _this.constructor.findOne(_this.id).then(function (entity) {\n                var json = entity.data();\n                _this.patchData(json);\n                _this.modifyFields = [];\n                resole(json);\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n    };\n    /**\n     * send request follow this entity's _links's href\n     * @param {string[]} keys links href in order\n     * @returns {Promise} resolve(json), reject(Request)\n     */\n    Entity.prototype.follow = function (keys) {\n        var _this = this;\n        return new Promise(function (resole, reject) {\n            function doFollow(data) {\n                request.mockRequest(data).follow(keys).then(function (json) {\n                    resole(json);\n                }).catch(function (err) {\n                    reject(err);\n                });\n            }\n            //fetch data before doFollow\n            if (_this._data['_links'] != null) {\n                doFollow(_this.data());\n            }\n            else {\n                _this.fetch().then(function () {\n                    doFollow(_this.data());\n                });\n            }\n        });\n    };\n    /**\n     * fetch relation property and store response value in entity's data attr,relation property is an instance of Entity.\n     * after fetch you can get relation property by get(propertyName)\n     * @param propertyName Entity relation property name in _links\n     * @param T relation property's type(extend Entity class)\n     * @returns {Promise<T>} resolve Entity relation property instance\n     */\n    Entity.prototype.fetchProperty = function (propertyName, T) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.follow([propertyName]).then(function (json) {\n                var entity = T.jsonToEntity(json);\n                _this.data()[propertyName] = entity;\n                resolve(entity);\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n    };\n    /**\n     * fetch relation property and store response value in entity's data attr,relation property is an Entity array\n     * after fetch you can get relation property by get(propertyName)\n     * @param propertyName Entity relation property name in _links\n     * @param T relation property's type(extend Entity class)\n     * @returns {Promise<T>}\n     */\n    Entity.prototype.fetchArrayProperty = function (propertyName, T) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.follow([propertyName]).then(function (json) {\n                var entities = T.jsonToEntityList(json);\n                _this.data()[propertyName] = entities;\n                resolve(entities);\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n    };\n    /**\n     * spring data rest entity base url\n     */\n    Entity.entityBaseURL = function () {\n        return exports.entityConfig.restBaseURL + \"/\" + this.entityName;\n    };\n    /**\n     * read spring data rest's response json data then parse and return entity array\n     * @param json\n     */\n    Entity.jsonToEntityList = function (json) {\n        var _this = this;\n        var re = [];\n        var arr = json['_embedded'][this.entityName];\n        arr.forEach(function (json) {\n            re.push(_this.jsonToEntity(json));\n        });\n        re['page'] = json['page']; //add page info\n        return re;\n    };\n    /**\n     * read spring data rest's response json data then parse and return an entity\n     * @param json\n     */\n    Entity.jsonToEntity = function (json) {\n        var entity = new this(json);\n        //json data from server is fresh,so entity modifyFields should be empty\n        entity.modifyFields = [];\n        return entity;\n    };\n    /**\n     * this method use before send request to service to create or update entity\n     * translate entity's data properties which contain Relation Entity instance value to text-uri list\n     * if data has Entity attr,this Entity attr will be replace by is href() value,and if this entity has't be store in service will store this entity first.\n     * @param data entity's data properties can has Entity attr\n     *\n     * resolve: pure json data can send to spring data rest service as request body\n     * reject: Request with error prop\n     */\n    Entity.translateRelationEntity = function (data) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (isEntity(data)) {\n                data.save().then(function () {\n                    resolve(data.href());\n                }).catch(function (err) {\n                    reject(err);\n                });\n            }\n            else if (Array.isArray(data)) {\n                var promiseList_1 = [];\n                data.forEach(function (one) { return promiseList_1.push(_this.translateRelationEntity(one)); });\n                Promise.all(promiseList_1).then(function (arr) {\n                    resolve(arr);\n                }).catch(function (err) {\n                    reject(err);\n                });\n            }\n            else if (data != null && data.constructor === Object) {\n                var promiseList = [];\n                var indexKeyMap_1 = {};\n                var nowIndex = 0;\n                for (var key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        indexKeyMap_1[nowIndex++] = key;\n                        promiseList.push(_this.translateRelationEntity(data[key]));\n                    }\n                }\n                Promise.all(promiseList).then(function (arr) {\n                    var json = {};\n                    for (var i = 0; i < arr.length; i++) {\n                        json[indexKeyMap_1[i]] = arr[i];\n                    }\n                    resolve(json);\n                }).catch(function (err) {\n                    reject(err);\n                });\n            }\n            else {\n                resolve(data);\n            }\n        });\n    };\n    /**\n     * get entity json data by id\n     * @param {string|number} id entity id\n     * @param {object?} queryParam\n     * @param {string} queryParam.projection the name of the projection you set with @Projection annotation name attributes\n     */\n    Entity.findOne = function (id, queryParam) {\n        var _this = this;\n        if (id != null) {\n            return new Promise(function (resolve, reject) {\n                request.get(_this.entityBaseURL() + \"/\" + id).queryParam(queryParam).send().then(function (json) {\n                    resolve(_this.jsonToEntity(json));\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n        }\n        else {\n            throw new Error('require id');\n        }\n    };\n    /**\n     * collection resource with page and sort.\n     * Returns all entities the repository servers through its findAll(…) method. If the repository is a paging repository we include the pagination links if necessary and additional page metadata.*\n     * @param {object} queryParam\n     * @param {number} queryParam.page the page number to access (0 indexed, defaults to 0).\n     * @param {number} queryParam.size the page size requested (defaults to 20).\n     * @param {string} queryParam.sort a collection of sort directives in the format ($propertyName,)+[asc|desc]?\n     * etc:name,age,desc\n     */\n    Entity.findAll = function (queryParam) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            request.get(_this.entityBaseURL()).queryParam(queryParam).send().then(function (json) {\n                var re = _this.jsonToEntityList(json);\n                resolve(re);\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n    };\n    /**\n     * search resource if the backing repository exposes query methods.\n     * call query methods exposed by a repository. The path and name of the query method resources can be modified using @RestResource on the method declaration.\n     *\n     * @param {string} searchPath spring data rest searchMethod path string\n     *\n     * @param {Object} queryParam search params\n     * If the query method has pagination capabilities (indicated in the URI template pointing to the resource) the resource takes the following parameters:\n     * @param {number} queryParam.page the page number to access (0 indexed, defaults to 0).\n     * @param {number} queryParam.size the page size requested (defaults to 20).\n     * @param {string} queryParam.sort a collection of sort directives in the format ($propertyName,)+[asc|desc]?\n     *\n     * @returns {Promise} resolve(Entity|Entity[]) reject(Request)\n     * resolve:\n     *      if response json data has _embedded attr then resolve Entity array,\n     *      else resolve one Entity\n     */\n    Entity.search = function (searchPath, queryParam) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            request.get(_this.entityBaseURL() + \"/search/\" + searchPath).queryParam(queryParam).send().then(function (json) {\n                try {\n                    resolve(_this.jsonToEntityList(json));\n                }\n                catch (_) {\n                    resolve(_this.jsonToEntity(json));\n                }\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n    };\n    /**\n     * remove entity by id\n     */\n    Entity.remove = function (id) {\n        return request.deleteMethod(this.entityBaseURL() + \"/\" + id).send();\n    };\n    /**\n     * expose entity instance properties in _data to entity itself use Object.defineProperty getter and setter\n     * after expose,you can access property in entity by entity.property rather than access by entity.data().property\n     * @param propertyName property name in entity.data() object.\n     */\n    Entity.exposeProperty = function (propertyName) {\n        Object.defineProperty(this.prototype, propertyName, {\n            get: function () {\n                return this.get(propertyName);\n            },\n            set: function (value) {\n                this.set(propertyName, value);\n            },\n            enumerable: true\n        });\n    };\n    return Entity;\n}());\nexports.Entity = Entity;\n/**\n * build an Entity Entity\n * @param entity_name spring data rest entity path\n */\nfunction extend(entity_name) {\n    var Class = (function (_super) {\n        __extends(Class, _super);\n        function Class() {\n            _super.apply(this, arguments);\n        }\n        return Class;\n    }(Entity));\n    /**\n     * spring data rest entity path\n     */\n    Class.entityName = entity_name;\n    return Class;\n}\nexports.extend = extend;\n//# sourceMappingURL=entity.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},,/*!********************!*\
  !*** multi spring ***!
  \********************/
function(g,I,C){g.exports=C(/*! ./browser.js */2)}]);