{"version":3,"sources":["webpack:///spring.min.js","webpack:///webpack/bootstrap dcf699c74e5bdbc098f5","webpack:///./request.js","webpack:///./browser.js","webpack:///./entity.js","webpack:///./index.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","buildHttpMethodFunction","method","httpRequest","path","url","test","requestConfig","baseURL","replace","Request","mockRequest","data","req","responseData","hasSend","fetchOptions","this","options","headers","response","error","Object","assign","globalFetchOptions","prototype","queryParam","obj","arr","key","hasOwnProperty","push","split","join","jsonBody","body","JSON","stringify","formBody","send","_this","Promise","resolve","reject","fetchStartHook","fetchEndHook_1","fetchEndHook","fetch","then","contentType","get","json","text","ok","err","follow","keys","self","doFollow","shift","links","post","patch","put","deleteMethod","spring","window","defineProperty","value","isEntity","any","constructor","href","Function","extend","entity_name","Class","_super","apply","arguments","__extends","Entity","entityName","entityBaseURL","entityConfig","restBaseURL","d","b","__","create","request","initData","_data","modifyFields","patchData","Error","set","length","_","translateRelationEntity","update","pureChange","forEach","save","remove","resole","findOne","entity","jsonToEntityList","re","one","Array","isArray","promiseList_1","all","promiseList","indexKeyMap_1","nowIndex","i","findAll","search","searchPath","__export"],"mappings":"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","file":"spring.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/*!********************!*\\\n  !*** multi spring ***!\n  \\********************/\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(/*! ./browser.js */2);\n\n\n/***/ },\n/* 1 */\n/*!********************!*\\\n  !*** ./request.js ***!\n  \\********************/\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction buildHttpMethodFunction(method) {\n\t    /**\n\t     * make http request user fetch API.\n\t     * if path param is a complete url then fetch ues path as url,\n\t     * else path is not a complete url string but just a path then fetch url=requestConfig.baseURL+path\n\t     * url string will been auto revised, etc: http://localhost/api//user///id/ will convert to http://localhost/api/user/id\n\t     * @param path url path\n\t     */\n\t    function httpRequest(path) {\n\t        var url = path;\n\t        if (!/^https?:\\/\\/.+$/g.test(path)) {\n\t            url = exports.requestConfig.baseURL + '/' + path;\n\t        }\n\t        url = url.replace(/\\/{2,}/g, '/').replace(/:\\//g, '://');\n\t        return new Request({ url: url, method: method });\n\t    }\n\t    return httpRequest;\n\t}\n\tvar Request = (function () {\n\t    /**\n\t     * @param fetchOptions\n\t     */\n\t    function Request(fetchOptions) {\n\t        /**\n\t         * store fetch options\n\t         */\n\t        this.options = {\n\t            headers: {}\n\t        };\n\t        /**\n\t         * has this request been send\n\t         */\n\t        this.hasSend = false;\n\t        /**\n\t         * The Response interface of the Fetch API represents the response to a request.\n\t         * @see https://developer.mozilla.org/en-US/docs/Web/API/Response\n\t         */\n\t        this.response = null;\n\t        /**\n\t         * if error happen during request error will store in there,else this will be null\n\t         */\n\t        this.error = null;\n\t        Object.assign(this.options, exports.requestConfig.globalFetchOptions, fetchOptions);\n\t    }\n\t    /**\n\t     * reset query param in request url by append ? and query param to end of url\n\t     * @param obj\n\t     */\n\t    Request.prototype.queryParam = function (obj) {\n\t        if (obj != null) {\n\t            var arr = [];\n\t            for (var key in obj) {\n\t                if (obj.hasOwnProperty(key)) {\n\t                    arr.push(key + \"=\" + obj[key]);\n\t                }\n\t            }\n\t            this.options.url = this.options.url.split('?')[0] + '?' + arr.join('&');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t     * set request body use json\n\t     * HTTP Header Content-Type will set as application/json\n\t     * @param obj\n\t     */\n\t    Request.prototype.jsonBody = function (obj) {\n\t        this.options.body = JSON.stringify(obj);\n\t        this.options.headers['Content-Type'] = 'application/json';\n\t        return this;\n\t    };\n\t    /**\n\t     * set request body as form type\n\t     * parse obj to form string\n\t     * HTTP Header Content-Type will set as application/x-www-form-urlencoded\n\t     * @param obj\n\t     */\n\t    Request.prototype.formBody = function (obj) {\n\t        var arr = [];\n\t        for (var key in obj) {\n\t            if (obj.hasOwnProperty(key)) {\n\t                arr.push(key + \"=\" + obj[key]);\n\t            }\n\t        }\n\t        this.options.body = arr.join('&');\n\t        this.options.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n\t        return this;\n\t    };\n\t    /**\n\t     * send fetch request\n\t     * get response's data\n\t     * resolve:\n\t     *      if response content-type is null,then resolve null\n\t     *      if response content-type has string json,then read response data as json and resolve pure json\n\t     *      else read response data as text and resolve plain text\n\t     */\n\t    Request.prototype.send = function () {\n\t        var _this = this;\n\t        return new Promise(function (resolve, reject) {\n\t            if (_this.hasSend) {\n\t                if (_this.error == null) {\n\t                    resolve(_this.responseData);\n\t                }\n\t                else {\n\t                    reject(_this.error);\n\t                }\n\t            }\n\t            else {\n\t                _this.hasSend = true;\n\t                var fetchStartHook = exports.requestConfig.fetchStartHook, fetchEndHook_1 = exports.requestConfig.fetchEndHook;\n\t                fetchStartHook && fetchStartHook(_this);\n\t                fetch(_this.options.url, _this.options).then(function (response) {\n\t                    _this.response = response;\n\t                    var contentType = response.headers.get('content-type');\n\t                    if (contentType == null) {\n\t                        return Promise.resolve();\n\t                    }\n\t                    else {\n\t                        if (/.*json.*/.test(contentType)) {\n\t                            //noinspection JSUnresolvedFunction\n\t                            return response.json();\n\t                        }\n\t                        else {\n\t                            return response.text();\n\t                        }\n\t                    }\n\t                }).then(function (data) {\n\t                    _this.responseData = data;\n\t                    if (_this.response.ok) {\n\t                        return Promise.resolve(data);\n\t                    }\n\t                    else {\n\t                        return Promise.reject(data);\n\t                    }\n\t                }).then(function (data) {\n\t                    fetchEndHook_1 && fetchEndHook_1(_this);\n\t                    resolve(data);\n\t                }).catch(function (err) {\n\t                    _this.error = err;\n\t                    fetchEndHook_1 && fetchEndHook_1(_this);\n\t                    reject(_this);\n\t                });\n\t            }\n\t        });\n\t    };\n\t    /**\n\t     * send request follow _links's href\n\t     * resolve:\n\t     *      if response content-type is null,then resolve null\n\t     *      if response content-type has string json,then read response data as json and resolve pure json\n\t     *      else read response data as text and resolve plain text\n\t     */\n\t    Request.prototype.follow = function (keys) {\n\t        var _this = this;\n\t        var self = this;\n\t        return new Promise(function (resolve, reject) {\n\t            function doFollow(data) {\n\t                var key = keys.shift();\n\t                if (key) {\n\t                    var links = data['_links'];\n\t                    var url = links[key];\n\t                    if (url != null) {\n\t                        url = url['href'];\n\t                        exports.get(url).send().then(function (data) {\n\t                            doFollow(data);\n\t                        }).catch(function (self) {\n\t                            reject(self);\n\t                        });\n\t                    }\n\t                    else {\n\t                        self.error = \"no key=\" + key + \" in links \" + JSON.stringify(links, null, 4);\n\t                        reject(this);\n\t                    }\n\t                }\n\t                else {\n\t                    resolve(data);\n\t                }\n\t            }\n\t            _this.send().then(function (data) {\n\t                doFollow(data);\n\t            }).catch(function (self) {\n\t                reject(self);\n\t            });\n\t        });\n\t    };\n\t    return Request;\n\t}());\n\texports.Request = Request;\n\texports.requestConfig = {\n\t    globalFetchOptions: {},\n\t    baseURL: '/',\n\t    fetchStartHook: null,\n\t    fetchEndHook: null\n\t};\n\t/**\n\t * make http get request\n\t * @param path url path\n\t */\n\texports.get = buildHttpMethodFunction('GET');\n\t/**\n\t * make http post request\n\t * @param path url path\n\t */\n\texports.post = buildHttpMethodFunction('POST');\n\t/**\n\t * make http patch request\n\t * @param path url path\n\t */\n\texports.patch = buildHttpMethodFunction('PATCH');\n\t/**\n\t * make http put request\n\t * @param path url path\n\t */\n\texports.put = buildHttpMethodFunction('PUT');\n\t//noinspection ReservedWordAsName\n\t/**\n\t * make http remove request\n\t * @param path url path\n\t */\n\texports.deleteMethod = buildHttpMethodFunction('DELETE');\n\t/**\n\t * mockRequest a request with data\n\t * @param {object} data\n\t */\n\tfunction mockRequest(data) {\n\t    var url = data['_links']['self']['href'];\n\t    var req = new Request({ url: url, method: 'GET' });\n\t    req.responseData = data;\n\t    req.hasSend = true;\n\t    return req;\n\t}\n\texports.mockRequest = mockRequest;\n\t//# sourceMappingURL=request.js.map\n\n/***/ },\n/* 2 */\n/*!********************!*\\\n  !*** ./browser.js ***!\n  \\********************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar spring = __webpack_require__(/*! ./index */ 4);\n\twindow['spring'] = spring;\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = spring;\n\t//# sourceMappingURL=browser.js.map\n\n/***/ },\n/* 3 */\n/*!*******************!*\\\n  !*** ./entity.js ***!\n  \\*******************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar request = __webpack_require__(/*! ./request */ 1);\n\texports.entityConfig = {\n\t    restBaseURL: '/'\n\t};\n\t/**\n\t * any is an instanceof Entity\n\t * @param any\n\t * @returns {boolean}\n\t */\n\tfunction isEntity(any) {\n\t    if (any instanceof Object) {\n\t        var prototype = any.constructor.prototype;\n\t        return prototype.href && prototype.href.constructor === Function;\n\t    }\n\t    return false;\n\t}\n\texports.isEntity = isEntity;\n\tvar Entity = (function () {\n\t    function Entity(initData) {\n\t        /**\n\t         * springRest data entity id.\n\t         * if id is set means this is a exists entity and can use methods:[save,exists,remove]\n\t         * if id is null,means this is a new entity which will course save() method create a new object\n\t         */\n\t        this.id = null;\n\t        /**\n\t         * store one entity's data\n\t         */\n\t        this._data = {};\n\t        /**\n\t         * track modify field\n\t         */\n\t        this.modifyFields = [];\n\t        this.patchData(initData);\n\t    }\n\t    /**\n\t     * get this entity's spring data rest resource uri.\n\t     * if this entity's has data and data has _link properties,use _data['_links']['self']['href']\n\t     * else use config.restBaseURL + entityName + '/' + self.id\n\t     */\n\t    Entity.prototype.href = function () {\n\t        var links;\n\t        if (this._data != null) {\n\t            links = this._data['_links'];\n\t        }\n\t        if (links != null) {\n\t            return links['self']['href'];\n\t        }\n\t        else {\n\t            if (this.id) {\n\t                return this.constructor.entityBaseURL + \"/\" + this.id;\n\t            }\n\t            else {\n\t                throw new Error(\"entity without id can't map to backend service:\\n\" + JSON.stringify(this));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t     * get entity properties value by key\n\t     * @param key properties name\n\t     */\n\t    Entity.prototype.get = function (key) {\n\t        return this._data[key];\n\t    };\n\t    /**\n\t     * set entity properties value by key\n\t     * @param key properties name\n\t     * @param value\n\t     */\n\t    Entity.prototype.set = function (key, value) {\n\t        this.modifyFields.push(key);\n\t        this._data[key] = value;\n\t    };\n\t    /**\n\t     * get entity data ref\n\t     */\n\t    Entity.prototype.data = function () {\n\t        return this._data;\n\t    };\n\t    /**\n\t     * assign a patchData object to entity's properties\n\t     * if patchData has self link, then id will update by parseIdFromData\n\t     * @param patchData\n\t     */\n\t    Entity.prototype.patchData = function (patchData) {\n\t        for (var key in patchData) {\n\t            if (patchData.hasOwnProperty(key)) {\n\t                this.set(key, patchData[key]);\n\t            }\n\t        }\n\t        try {\n\t            var id = patchData['_links']['self']['href'].split(/\\//);\n\t            id = id[id.length - 1];\n\t            if (id != null) {\n\t                this.id = id;\n\t            }\n\t        }\n\t        catch (_) {\n\t        }\n\t    };\n\t    /**\n\t     * create an new entity\n\t     * send HTTP POST request to create an entity\n\t     */\n\t    Entity.prototype.create = function () {\n\t        var _this = this;\n\t        return new Promise(function (resolve, reject) {\n\t            _this.constructor.translateRelationEntity(_this.data()).then(function (body) {\n\t                return request.post(_this.constructor.entityBaseURL).jsonBody(body).send();\n\t            }).then(function (json) {\n\t                _this.patchData(json);\n\t                _this.modifyFields = [];\n\t                resolve(json);\n\t            }).catch(function (err) {\n\t                reject(err);\n\t            });\n\t        });\n\t    };\n\t    /**\n\t     * update an entity\n\t     * send HTTP PATCH request to update an entity(will watch change in data properties to track change fields)\n\t     * @returns {Promise} resolve(json), reject(Request)\n\t     * @private\n\t     */\n\t    Entity.prototype.update = function () {\n\t        var _this = this;\n\t        return new Promise(function (resolve, reject) {\n\t            var pureChange = {};\n\t            if (_this.modifyFields.length == 0) {\n\t                resolve();\n\t                return;\n\t            }\n\t            _this.modifyFields.forEach(function (key) {\n\t                if (pureChange.hasOwnProperty(key) || key[0] === '_') {\n\t                    return;\n\t                }\n\t                else if (_this._data.hasOwnProperty(key)) {\n\t                    pureChange[key] = _this.get(key);\n\t                }\n\t            });\n\t            _this.constructor.translateRelationEntity(pureChange).then(function (json) {\n\t                return request.patch(_this.href()).jsonBody(json).send();\n\t            }).then(function (json) {\n\t                _this.patchData(json);\n\t                _this.modifyFields = [];\n\t                resolve(json);\n\t            }).catch(function (err) {\n\t                reject(err);\n\t            });\n\t        });\n\t    };\n\t    /**\n\t     * create or update entity\n\t     * if id properties is set update change to service,\n\t     * else create an new entity to service.\n\t     */\n\t    Entity.prototype.save = function () {\n\t        if (this.id != null) {\n\t            return this.update();\n\t        }\n\t        else {\n\t            return this.create();\n\t        }\n\t    };\n\t    /**\n\t     * remove this entity\n\t     */\n\t    Entity.prototype.remove = function () {\n\t        return this.constructor.remove(this.id);\n\t    };\n\t    /**\n\t     * fetch entity data to keep updated to newest\n\t     * @returns {Promise} resolve(json), reject(Request)\n\t     */\n\t    Entity.prototype.fetch = function () {\n\t        var _this = this;\n\t        return new Promise(function (resole, reject) {\n\t            _this.constructor.findOne(_this.id).then(function (entity) {\n\t                var json = entity.data();\n\t                _this.patchData(json);\n\t                resole(json);\n\t            }).catch(function (err) {\n\t                reject(err);\n\t            });\n\t        });\n\t    };\n\t    /**\n\t     * send request follow this entity's _links's href\n\t     * @param {string[]} keys links href in order\n\t     * @returns {Promise} resolve(json), reject(Request)\n\t     */\n\t    Entity.prototype.follow = function (keys) {\n\t        var _this = this;\n\t        return new Promise(function (resole, reject) {\n\t            function doFollow(data) {\n\t                request.mockRequest(data).follow(keys).then(function (json) {\n\t                    resole(json);\n\t                }).catch(function (err) {\n\t                    reject(err);\n\t                });\n\t            }\n\t            if (_this.modifyFields.length > 0) {\n\t                doFollow(_this.data());\n\t            }\n\t            else {\n\t                _this.fetch().then(function () {\n\t                    doFollow(_this.data());\n\t                });\n\t            }\n\t        });\n\t    };\n\t    /**\n\t     * read spring data rest's response json data then parse and return entity array\n\t     * @param json\n\t     */\n\t    Entity.jsonToEntityList = function (json) {\n\t        var re = [];\n\t        var arr = json['_embedded'][this.entityName];\n\t        arr.forEach(function (one) { return re.push(new Entity(one)); });\n\t        return re;\n\t    };\n\t    /**\n\t     * translate entity's data properties which contain Relation Entity instance value to text-uri list\n\t     * if data has Entity attr,this Entity attr will be replace by is href() value,and if this entity has't be store in service will store this entity first.\n\t     * @param data entity's data properties can has Entity attr\n\t     *\n\t     * resolve: pure json data can send to spring data rest service as request body\n\t     * reject: Request with error prop\n\t     */\n\t    Entity.translateRelationEntity = function (data) {\n\t        var _this = this;\n\t        return new Promise(function (resolve, reject) {\n\t            if (isEntity(data)) {\n\t                data.save().then(function () {\n\t                    resolve(data.href());\n\t                }).catch(function (err) {\n\t                    reject(err);\n\t                });\n\t            }\n\t            else if (Array.isArray(data)) {\n\t                var promiseList_1 = [];\n\t                data.forEach(function (one) { return promiseList_1.push(_this.translateRelationEntity(one)); });\n\t                Promise.all(promiseList_1).then(function (arr) {\n\t                    resolve(arr);\n\t                }).catch(function (err) {\n\t                    reject(err);\n\t                });\n\t            }\n\t            else if (data != null && data.constructor === Object) {\n\t                var promiseList = [];\n\t                var indexKeyMap_1 = {};\n\t                var nowIndex = 0;\n\t                for (var key in data) {\n\t                    if (data.hasOwnProperty(key)) {\n\t                        indexKeyMap_1[nowIndex++] = key;\n\t                        promiseList.push(_this.translateRelationEntity(data[key]));\n\t                    }\n\t                }\n\t                Promise.all(promiseList).then(function (arr) {\n\t                    var json = {};\n\t                    for (var i = 0; i < arr.length; i++) {\n\t                        json[indexKeyMap_1[i]] = arr[i];\n\t                    }\n\t                    resolve(json);\n\t                }).catch(function (err) {\n\t                    reject(err);\n\t                });\n\t            }\n\t            else {\n\t                resolve(data);\n\t            }\n\t        });\n\t    };\n\t    /**\n\t     * get entity json data by id\n\t     * @param {string|number} id entity id\n\t     * @param {object?} queryParam\n\t     * @param {string} queryParam.projection the name of the projection you set with @Projection annotation name attributes\n\t     */\n\t    Entity.findOne = function (id, queryParam) {\n\t        var _this = this;\n\t        if (id != null) {\n\t            return new Promise(function (resolve, reject) {\n\t                request.get(_this.entityBaseURL + \"/\" + id).queryParam(queryParam).send().then(function (json) {\n\t                    resolve(new Entity(json));\n\t                }).catch(function (err) {\n\t                    reject(err);\n\t                });\n\t            });\n\t        }\n\t        else {\n\t            throw new Error('require id');\n\t        }\n\t    };\n\t    /**\n\t     * collection resource with page and sort.\n\t     * Returns all entities the repository servers through its findAll(…) method. If the repository is a paging repository we include the pagination links if necessary and additional page metadata.*\n\t     * @param {object} queryParam\n\t     * @param {number} queryParam.page the page number to access (0 indexed, defaults to 0).\n\t     * @param {number} queryParam.size the page size requested (defaults to 20).\n\t     * @param {string} queryParam.sort a collection of sort directives in the format ($propertyName,)+[asc|desc]?\n\t     * etc:name,age,desc\n\t     */\n\t    Entity.findAll = function (queryParam) {\n\t        var _this = this;\n\t        return new Promise(function (resolve, reject) {\n\t            request.get(_this.entityBaseURL).queryParam(queryParam).send().then(function (json) {\n\t                var re = _this.jsonToEntityList(json);\n\t                resolve(re);\n\t            }).catch(function (err) {\n\t                reject(err);\n\t            });\n\t        });\n\t    };\n\t    /**\n\t     * search resource if the backing repository exposes query methods.\n\t     * call query methods exposed by a repository. The path and name of the query method resources can be modified using @RestResource on the method declaration.\n\t     *\n\t     * @param {string} searchPath spring data rest searchMethod path string\n\t     *\n\t     * @param {Object} queryParam search params\n\t     * If the query method has pagination capabilities (indicated in the URI template pointing to the resource) the resource takes the following parameters:\n\t     * @param {number} queryParam.page the page number to access (0 indexed, defaults to 0).\n\t     * @param {number} queryParam.size the page size requested (defaults to 20).\n\t     * @param {string} queryParam.sort a collection of sort directives in the format ($propertyName,)+[asc|desc]?\n\t     *\n\t     * @returns {Promise} resolve(Entity|Entity[]) reject(Request)\n\t     * resolve:\n\t     *      if response json data has _embedded attr then resolve Entity array,\n\t     *      else resolve one Entity\n\t     */\n\t    Entity.search = function (searchPath, queryParam) {\n\t        var _this = this;\n\t        return new Promise(function (resolve, reject) {\n\t            request.get(_this.entityBaseURL + \"/search/\" + searchPath).queryParam(queryParam).send().then(function (json) {\n\t                try {\n\t                    resolve(_this.jsonToEntityList(json));\n\t                }\n\t                catch (_) {\n\t                    resolve(new Entity(json));\n\t                }\n\t            }).catch(function (err) {\n\t                reject(err);\n\t            });\n\t        });\n\t    };\n\t    /**\n\t     * remove entity by id\n\t     */\n\t    Entity.remove = function (id) {\n\t        return request.deleteMethod(this.entityBaseURL + \"/\" + id).send();\n\t    };\n\t    return Entity;\n\t}());\n\texports.Entity = Entity;\n\t/**\n\t * build an Entity Entity\n\t * @param entity_name spring data rest entity path\n\t */\n\tfunction extend(entity_name) {\n\t    var Class = (function (_super) {\n\t        __extends(Class, _super);\n\t        function Class() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        return Class;\n\t    }(Entity));\n\t    /**\n\t     * spring data rest entity path\n\t     */\n\t    Class.entityName = entity_name;\n\t    Class.entityBaseURL = exports.entityConfig.restBaseURL + \"/\" + entity_name;\n\t    return Class;\n\t}\n\texports.extend = extend;\n\t//# sourceMappingURL=entity.js.map\n\n/***/ },\n/* 4 */\n/*!******************!*\\\n  !*** ./index.js ***!\n  \\******************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t__export(__webpack_require__(/*! ./request */ 1));\n\t__export(__webpack_require__(/*! ./entity */ 3));\n\t//# sourceMappingURL=index.js.map\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** spring.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap dcf699c74e5bdbc098f5\n **/","\"use strict\";\nfunction buildHttpMethodFunction(method) {\n    /**\n     * make http request user fetch API.\n     * if path param is a complete url then fetch ues path as url,\n     * else path is not a complete url string but just a path then fetch url=requestConfig.baseURL+path\n     * url string will been auto revised, etc: http://localhost/api//user///id/ will convert to http://localhost/api/user/id\n     * @param path url path\n     */\n    function httpRequest(path) {\n        var url = path;\n        if (!/^https?:\\/\\/.+$/g.test(path)) {\n            url = exports.requestConfig.baseURL + '/' + path;\n        }\n        url = url.replace(/\\/{2,}/g, '/').replace(/:\\//g, '://');\n        return new Request({ url: url, method: method });\n    }\n    return httpRequest;\n}\nvar Request = (function () {\n    /**\n     * @param fetchOptions\n     */\n    function Request(fetchOptions) {\n        /**\n         * store fetch options\n         */\n        this.options = {\n            headers: {}\n        };\n        /**\n         * has this request been send\n         */\n        this.hasSend = false;\n        /**\n         * The Response interface of the Fetch API represents the response to a request.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Response\n         */\n        this.response = null;\n        /**\n         * if error happen during request error will store in there,else this will be null\n         */\n        this.error = null;\n        Object.assign(this.options, exports.requestConfig.globalFetchOptions, fetchOptions);\n    }\n    /**\n     * reset query param in request url by append ? and query param to end of url\n     * @param obj\n     */\n    Request.prototype.queryParam = function (obj) {\n        if (obj != null) {\n            var arr = [];\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    arr.push(key + \"=\" + obj[key]);\n                }\n            }\n            this.options.url = this.options.url.split('?')[0] + '?' + arr.join('&');\n        }\n        return this;\n    };\n    /**\n     * set request body use json\n     * HTTP Header Content-Type will set as application/json\n     * @param obj\n     */\n    Request.prototype.jsonBody = function (obj) {\n        this.options.body = JSON.stringify(obj);\n        this.options.headers['Content-Type'] = 'application/json';\n        return this;\n    };\n    /**\n     * set request body as form type\n     * parse obj to form string\n     * HTTP Header Content-Type will set as application/x-www-form-urlencoded\n     * @param obj\n     */\n    Request.prototype.formBody = function (obj) {\n        var arr = [];\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                arr.push(key + \"=\" + obj[key]);\n            }\n        }\n        this.options.body = arr.join('&');\n        this.options.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n        return this;\n    };\n    /**\n     * send fetch request\n     * get response's data\n     * resolve:\n     *      if response content-type is null,then resolve null\n     *      if response content-type has string json,then read response data as json and resolve pure json\n     *      else read response data as text and resolve plain text\n     */\n    Request.prototype.send = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (_this.hasSend) {\n                if (_this.error == null) {\n                    resolve(_this.responseData);\n                }\n                else {\n                    reject(_this.error);\n                }\n            }\n            else {\n                _this.hasSend = true;\n                var fetchStartHook = exports.requestConfig.fetchStartHook, fetchEndHook_1 = exports.requestConfig.fetchEndHook;\n                fetchStartHook && fetchStartHook(_this);\n                fetch(_this.options.url, _this.options).then(function (response) {\n                    _this.response = response;\n                    var contentType = response.headers.get('content-type');\n                    if (contentType == null) {\n                        return Promise.resolve();\n                    }\n                    else {\n                        if (/.*json.*/.test(contentType)) {\n                            //noinspection JSUnresolvedFunction\n                            return response.json();\n                        }\n                        else {\n                            return response.text();\n                        }\n                    }\n                }).then(function (data) {\n                    _this.responseData = data;\n                    if (_this.response.ok) {\n                        return Promise.resolve(data);\n                    }\n                    else {\n                        return Promise.reject(data);\n                    }\n                }).then(function (data) {\n                    fetchEndHook_1 && fetchEndHook_1(_this);\n                    resolve(data);\n                }).catch(function (err) {\n                    _this.error = err;\n                    fetchEndHook_1 && fetchEndHook_1(_this);\n                    reject(_this);\n                });\n            }\n        });\n    };\n    /**\n     * send request follow _links's href\n     * resolve:\n     *      if response content-type is null,then resolve null\n     *      if response content-type has string json,then read response data as json and resolve pure json\n     *      else read response data as text and resolve plain text\n     */\n    Request.prototype.follow = function (keys) {\n        var _this = this;\n        var self = this;\n        return new Promise(function (resolve, reject) {\n            function doFollow(data) {\n                var key = keys.shift();\n                if (key) {\n                    var links = data['_links'];\n                    var url = links[key];\n                    if (url != null) {\n                        url = url['href'];\n                        exports.get(url).send().then(function (data) {\n                            doFollow(data);\n                        }).catch(function (self) {\n                            reject(self);\n                        });\n                    }\n                    else {\n                        self.error = \"no key=\" + key + \" in links \" + JSON.stringify(links, null, 4);\n                        reject(this);\n                    }\n                }\n                else {\n                    resolve(data);\n                }\n            }\n            _this.send().then(function (data) {\n                doFollow(data);\n            }).catch(function (self) {\n                reject(self);\n            });\n        });\n    };\n    return Request;\n}());\nexports.Request = Request;\nexports.requestConfig = {\n    globalFetchOptions: {},\n    baseURL: '/',\n    fetchStartHook: null,\n    fetchEndHook: null\n};\n/**\n * make http get request\n * @param path url path\n */\nexports.get = buildHttpMethodFunction('GET');\n/**\n * make http post request\n * @param path url path\n */\nexports.post = buildHttpMethodFunction('POST');\n/**\n * make http patch request\n * @param path url path\n */\nexports.patch = buildHttpMethodFunction('PATCH');\n/**\n * make http put request\n * @param path url path\n */\nexports.put = buildHttpMethodFunction('PUT');\n//noinspection ReservedWordAsName\n/**\n * make http remove request\n * @param path url path\n */\nexports.deleteMethod = buildHttpMethodFunction('DELETE');\n/**\n * mockRequest a request with data\n * @param {object} data\n */\nfunction mockRequest(data) {\n    var url = data['_links']['self']['href'];\n    var req = new Request({ url: url, method: 'GET' });\n    req.responseData = data;\n    req.hasSend = true;\n    return req;\n}\nexports.mockRequest = mockRequest;\n//# sourceMappingURL=request.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./request.js\n ** module id = 1\n ** module chunks = 0 1\n **/","\"use strict\";\nvar spring = require('./index');\nwindow['spring'] = spring;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = spring;\n//# sourceMappingURL=browser.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./browser.js\n ** module id = 2\n ** module chunks = 0\n **/","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar request = require('./request');\nexports.entityConfig = {\n    restBaseURL: '/'\n};\n/**\n * any is an instanceof Entity\n * @param any\n * @returns {boolean}\n */\nfunction isEntity(any) {\n    if (any instanceof Object) {\n        var prototype = any.constructor.prototype;\n        return prototype.href && prototype.href.constructor === Function;\n    }\n    return false;\n}\nexports.isEntity = isEntity;\nvar Entity = (function () {\n    function Entity(initData) {\n        /**\n         * springRest data entity id.\n         * if id is set means this is a exists entity and can use methods:[save,exists,remove]\n         * if id is null,means this is a new entity which will course save() method create a new object\n         */\n        this.id = null;\n        /**\n         * store one entity's data\n         */\n        this._data = {};\n        /**\n         * track modify field\n         */\n        this.modifyFields = [];\n        this.patchData(initData);\n    }\n    /**\n     * get this entity's spring data rest resource uri.\n     * if this entity's has data and data has _link properties,use _data['_links']['self']['href']\n     * else use config.restBaseURL + entityName + '/' + self.id\n     */\n    Entity.prototype.href = function () {\n        var links;\n        if (this._data != null) {\n            links = this._data['_links'];\n        }\n        if (links != null) {\n            return links['self']['href'];\n        }\n        else {\n            if (this.id) {\n                return this.constructor.entityBaseURL + \"/\" + this.id;\n            }\n            else {\n                throw new Error(\"entity without id can't map to backend service:\\n\" + JSON.stringify(this));\n            }\n        }\n    };\n    /**\n     * get entity properties value by key\n     * @param key properties name\n     */\n    Entity.prototype.get = function (key) {\n        return this._data[key];\n    };\n    /**\n     * set entity properties value by key\n     * @param key properties name\n     * @param value\n     */\n    Entity.prototype.set = function (key, value) {\n        this.modifyFields.push(key);\n        this._data[key] = value;\n    };\n    /**\n     * get entity data ref\n     */\n    Entity.prototype.data = function () {\n        return this._data;\n    };\n    /**\n     * assign a patchData object to entity's properties\n     * if patchData has self link, then id will update by parseIdFromData\n     * @param patchData\n     */\n    Entity.prototype.patchData = function (patchData) {\n        for (var key in patchData) {\n            if (patchData.hasOwnProperty(key)) {\n                this.set(key, patchData[key]);\n            }\n        }\n        try {\n            var id = patchData['_links']['self']['href'].split(/\\//);\n            id = id[id.length - 1];\n            if (id != null) {\n                this.id = id;\n            }\n        }\n        catch (_) {\n        }\n    };\n    /**\n     * create an new entity\n     * send HTTP POST request to create an entity\n     */\n    Entity.prototype.create = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.constructor.translateRelationEntity(_this.data()).then(function (body) {\n                return request.post(_this.constructor.entityBaseURL).jsonBody(body).send();\n            }).then(function (json) {\n                _this.patchData(json);\n                _this.modifyFields = [];\n                resolve(json);\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n    };\n    /**\n     * update an entity\n     * send HTTP PATCH request to update an entity(will watch change in data properties to track change fields)\n     * @returns {Promise} resolve(json), reject(Request)\n     * @private\n     */\n    Entity.prototype.update = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var pureChange = {};\n            if (_this.modifyFields.length == 0) {\n                resolve();\n                return;\n            }\n            _this.modifyFields.forEach(function (key) {\n                if (pureChange.hasOwnProperty(key) || key[0] === '_') {\n                    return;\n                }\n                else if (_this._data.hasOwnProperty(key)) {\n                    pureChange[key] = _this.get(key);\n                }\n            });\n            _this.constructor.translateRelationEntity(pureChange).then(function (json) {\n                return request.patch(_this.href()).jsonBody(json).send();\n            }).then(function (json) {\n                _this.patchData(json);\n                _this.modifyFields = [];\n                resolve(json);\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n    };\n    /**\n     * create or update entity\n     * if id properties is set update change to service,\n     * else create an new entity to service.\n     */\n    Entity.prototype.save = function () {\n        if (this.id != null) {\n            return this.update();\n        }\n        else {\n            return this.create();\n        }\n    };\n    /**\n     * remove this entity\n     */\n    Entity.prototype.remove = function () {\n        return this.constructor.remove(this.id);\n    };\n    /**\n     * fetch entity data to keep updated to newest\n     * @returns {Promise} resolve(json), reject(Request)\n     */\n    Entity.prototype.fetch = function () {\n        var _this = this;\n        return new Promise(function (resole, reject) {\n            _this.constructor.findOne(_this.id).then(function (entity) {\n                var json = entity.data();\n                _this.patchData(json);\n                resole(json);\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n    };\n    /**\n     * send request follow this entity's _links's href\n     * @param {string[]} keys links href in order\n     * @returns {Promise} resolve(json), reject(Request)\n     */\n    Entity.prototype.follow = function (keys) {\n        var _this = this;\n        return new Promise(function (resole, reject) {\n            function doFollow(data) {\n                request.mockRequest(data).follow(keys).then(function (json) {\n                    resole(json);\n                }).catch(function (err) {\n                    reject(err);\n                });\n            }\n            if (_this.modifyFields.length > 0) {\n                doFollow(_this.data());\n            }\n            else {\n                _this.fetch().then(function () {\n                    doFollow(_this.data());\n                });\n            }\n        });\n    };\n    /**\n     * read spring data rest's response json data then parse and return entity array\n     * @param json\n     */\n    Entity.jsonToEntityList = function (json) {\n        var re = [];\n        var arr = json['_embedded'][this.entityName];\n        arr.forEach(function (one) { return re.push(new Entity(one)); });\n        return re;\n    };\n    /**\n     * translate entity's data properties which contain Relation Entity instance value to text-uri list\n     * if data has Entity attr,this Entity attr will be replace by is href() value,and if this entity has't be store in service will store this entity first.\n     * @param data entity's data properties can has Entity attr\n     *\n     * resolve: pure json data can send to spring data rest service as request body\n     * reject: Request with error prop\n     */\n    Entity.translateRelationEntity = function (data) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (isEntity(data)) {\n                data.save().then(function () {\n                    resolve(data.href());\n                }).catch(function (err) {\n                    reject(err);\n                });\n            }\n            else if (Array.isArray(data)) {\n                var promiseList_1 = [];\n                data.forEach(function (one) { return promiseList_1.push(_this.translateRelationEntity(one)); });\n                Promise.all(promiseList_1).then(function (arr) {\n                    resolve(arr);\n                }).catch(function (err) {\n                    reject(err);\n                });\n            }\n            else if (data != null && data.constructor === Object) {\n                var promiseList = [];\n                var indexKeyMap_1 = {};\n                var nowIndex = 0;\n                for (var key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        indexKeyMap_1[nowIndex++] = key;\n                        promiseList.push(_this.translateRelationEntity(data[key]));\n                    }\n                }\n                Promise.all(promiseList).then(function (arr) {\n                    var json = {};\n                    for (var i = 0; i < arr.length; i++) {\n                        json[indexKeyMap_1[i]] = arr[i];\n                    }\n                    resolve(json);\n                }).catch(function (err) {\n                    reject(err);\n                });\n            }\n            else {\n                resolve(data);\n            }\n        });\n    };\n    /**\n     * get entity json data by id\n     * @param {string|number} id entity id\n     * @param {object?} queryParam\n     * @param {string} queryParam.projection the name of the projection you set with @Projection annotation name attributes\n     */\n    Entity.findOne = function (id, queryParam) {\n        var _this = this;\n        if (id != null) {\n            return new Promise(function (resolve, reject) {\n                request.get(_this.entityBaseURL + \"/\" + id).queryParam(queryParam).send().then(function (json) {\n                    resolve(new Entity(json));\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n        }\n        else {\n            throw new Error('require id');\n        }\n    };\n    /**\n     * collection resource with page and sort.\n     * Returns all entities the repository servers through its findAll(…) method. If the repository is a paging repository we include the pagination links if necessary and additional page metadata.*\n     * @param {object} queryParam\n     * @param {number} queryParam.page the page number to access (0 indexed, defaults to 0).\n     * @param {number} queryParam.size the page size requested (defaults to 20).\n     * @param {string} queryParam.sort a collection of sort directives in the format ($propertyName,)+[asc|desc]?\n     * etc:name,age,desc\n     */\n    Entity.findAll = function (queryParam) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            request.get(_this.entityBaseURL).queryParam(queryParam).send().then(function (json) {\n                var re = _this.jsonToEntityList(json);\n                resolve(re);\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n    };\n    /**\n     * search resource if the backing repository exposes query methods.\n     * call query methods exposed by a repository. The path and name of the query method resources can be modified using @RestResource on the method declaration.\n     *\n     * @param {string} searchPath spring data rest searchMethod path string\n     *\n     * @param {Object} queryParam search params\n     * If the query method has pagination capabilities (indicated in the URI template pointing to the resource) the resource takes the following parameters:\n     * @param {number} queryParam.page the page number to access (0 indexed, defaults to 0).\n     * @param {number} queryParam.size the page size requested (defaults to 20).\n     * @param {string} queryParam.sort a collection of sort directives in the format ($propertyName,)+[asc|desc]?\n     *\n     * @returns {Promise} resolve(Entity|Entity[]) reject(Request)\n     * resolve:\n     *      if response json data has _embedded attr then resolve Entity array,\n     *      else resolve one Entity\n     */\n    Entity.search = function (searchPath, queryParam) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            request.get(_this.entityBaseURL + \"/search/\" + searchPath).queryParam(queryParam).send().then(function (json) {\n                try {\n                    resolve(_this.jsonToEntityList(json));\n                }\n                catch (_) {\n                    resolve(new Entity(json));\n                }\n            }).catch(function (err) {\n                reject(err);\n            });\n        });\n    };\n    /**\n     * remove entity by id\n     */\n    Entity.remove = function (id) {\n        return request.deleteMethod(this.entityBaseURL + \"/\" + id).send();\n    };\n    return Entity;\n}());\nexports.Entity = Entity;\n/**\n * build an Entity Entity\n * @param entity_name spring data rest entity path\n */\nfunction extend(entity_name) {\n    var Class = (function (_super) {\n        __extends(Class, _super);\n        function Class() {\n            _super.apply(this, arguments);\n        }\n        return Class;\n    }(Entity));\n    /**\n     * spring data rest entity path\n     */\n    Class.entityName = entity_name;\n    Class.entityBaseURL = exports.entityConfig.restBaseURL + \"/\" + entity_name;\n    return Class;\n}\nexports.extend = extend;\n//# sourceMappingURL=entity.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./entity.js\n ** module id = 3\n ** module chunks = 0\n **/","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n__export(require('./request'));\n__export(require('./entity'));\n//# sourceMappingURL=index.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 4\n ** module chunks = 0\n **/"],"sourceRoot":""}