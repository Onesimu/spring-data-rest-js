0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/Cellar/node/6.2.2/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@3.9.5
3 info using node@v6.2.2
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/wuhaolin/WebstormProjects/spring-data-rest-js',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/wuhaolin/.npm/spring-data-rest-js/0.2.19/package.tgz not in flight; packing
9 verbose correctMkdir /Users/wuhaolin/.npm correctMkdir not in flight; initializing
10 info lifecycle spring-data-rest-js@0.2.19~prepublish: spring-data-rest-js@0.2.19
11 silly lifecycle spring-data-rest-js@0.2.19~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/wuhaolin/.npm/spring-data-rest-js/0.2.19/package.tgz',
12 verbose tar pack   '/Users/wuhaolin/WebstormProjects/spring-data-rest-js' ]
13 verbose tarball /Users/wuhaolin/.npm/spring-data-rest-js/0.2.19/package.tgz
14 verbose folder /Users/wuhaolin/WebstormProjects/spring-data-rest-js
15 verbose addLocalTarball adding from inside cache /Users/wuhaolin/.npm/spring-data-rest-js/0.2.19/package.tgz
16 verbose correctMkdir /Users/wuhaolin/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd spring-data-rest-js@0.2.19
18 verbose afterAdd /Users/wuhaolin/.npm/spring-data-rest-js/0.2.19/package/package.json not in flight; writing
19 verbose correctMkdir /Users/wuhaolin/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/wuhaolin/.npm/spring-data-rest-js/0.2.19/package/package.json written
21 silly publish { name: 'spring-data-rest-js',
21 silly publish   description: 'js lib for java spring data rest service,work for node.js and browser,use fetch API',
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/gwuhaolin/spring-data-rest-js.git' },
21 silly publish   keywords:
21 silly publish    [ 'spring',
21 silly publish      'spring data rest',
21 silly publish      'hypermedia-driven HTTP resources',
21 silly publish      'restful',
21 silly publish      'react angularjs angular2 vuejs',
21 silly publish      'typescript' ],
21 silly publish   version: '0.2.19',
21 silly publish   license: 'MIT',
21 silly publish   dependencies: { 'node-fetch': '^1.5.3' },
21 silly publish   main: 'node.js',
21 silly publish   browser: 'browser.js',
21 silly publish   typings: 'index.d.ts',
21 silly publish   scripts: { test: 'tsc & mocha' },
21 silly publish   readme: '# Spring Data Rest JavaScript Library\n[![Build Status](https://img.shields.io/travis/gwuhaolin/spring-data-rest-js.svg?style=flat-square)](https://travis-ci.org/gwuhaolin/spring-data-rest-js)\n[![Npm Package](https://img.shields.io/npm/v/spring-data-rest-js.svg?style=flat-square)](https://www.npmjs.org/package/spring-data-rest-js)\n[![Npm Downloads](http://img.shields.io/npm/dm/spring-data-rest-js.svg?style=flat-square)](https://npmjs.org/package/spring-data-rest-js)\n[![Dependency Status](https://david-dm.org/gwuhaolin/spring-data-rest-js.svg?style=flat-square)](https://npmjs.org/package/spring-data-rest-js)\n\n[Spring Data Rest](http://projects.springRest.io/springRest-data-rest/) is makes it easy to build hypermedia-driven REST web services. This lib provider\nuseful util to play with the service in js. It\'s a easy to use and lightweight (*2kb after min and gzip*) javascript lib can run in both node.js and browser,can be work with lib like AngularJS React Vue.\nsupport Typescript.\n\n## Installation\n```sh\n# for npm\nnpm install spring-data-rest-js --save\n# for bower\nbower install spring-data-rest-js\n```\nthen use it in commonjs env\n```js\nlet spring = require(\'spring-data-rest-js\');\n```\nfor browser,you can use tools like [Webpack](http://webpack.github.io/) or [Browserify](http://browserify.org/) to bundle up your module for browser.\nyou also can include lib file in html file and then use it:\n```html\n<!DOCTYPE html>\n<html>\n<body>\n<script src="./dist/spring.js"></script>\n<script>\n    window.spring.post(\'/\');\n</script>\n</body>\n</html>\n```\n\n## SpringRequest\n\n#### Build SpringRequest\n#####add query param in url\n```js\nlet param1 = {name: \'中\'};\nlet param2 = {age: 23, academy: \'physics\'};\nlet request = spring.get(spring.requestConfig.baseURL).queryParam(param1);\nassert.equal(request.options.url, spring.requestConfig.baseURL + \'?name=中\');\nrequest.queryParam(param2);\nassert.equal(request.options.url, spring.requestConfig.baseURL + \'?age=23&academy=physics\');\n```\n#####send request body as json\n```js\nlet param = {name: \'吴浩麟\', age: 23};\nlet request = spring.post(\'/\').jsonBody(param);\nassert.equal(request.options.body, JSON.stringify(param));\nassert.equal(request.options.headers[\'Content-Type\'], \'application/json\');\n```\n\n#####send request body as form\n```js\nlet param = {name: \'中国\', age: 123};\nlet request = spring.post(\'/postForm\').formBody(param);\nassert.equal(request.options.headers[\'Content-Type\'], \'application/x-www-form-urlencoded\');\nrequest.send().then(json=> {\n    assert.equal(json.name, \'中国\');\n    assert.equal(json.age, 123);\n}).catch(err=> {\n    done(err);\n});\n```\n\n#####auto revise url\nif path param is a complete url then fetch ues path as url,\nelse path is not a complete url string but just a path then fetch url=config.baseURL+path\nurl string will been auto revised, etc: http://localhost/api//user///id/ will convert to http://localhost/api/user/id\n```js\nspring.requestConfig.baseURL = \'http://localhost:8080/\';\nlet req = spring.get(\'//hello/name//\');\nassert.equal(req.options.url, `http://localhost:8080/hello/name/`);\nlet req2 = spring.get(\'https://google.com//hello/name\');\nassert.equal(req2.options.url, `https://google.com/hello/name`);\n```\n\n#### Config SpringRequest\n```js\nspring.request.config = {\n    /**\n     * options used to every fetch request\n     */\n    globalFetchOptions: {\n         headers: {\n              \'Content-Type\': \'application/json\'\n         },\n         credentials: \'same-origin\'\n    },\n\n    /**\n     * fetch request base url\n     * notice: must end with /\n     * @type {string}\n     */\n    baseURL: \'/\',\n    /**\n     * call before send fetch request\n     * default do nothing\n     * @param {SpringRequest} request SpringRequest ref\n     */\n    fetchStartHook: null,\n    /**\n     * call after fetch request end\n     * default do nothing\n     * @param {SpringRequest} request SpringRequest ref\n     */\n    fetchEndHook: null\n};\n```\n\n#### Fetch API Global Option\nfetch API request options\nsee [detail](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\n```js\nspring.requestConfig.globalFetchOptions = {\n   method: \'POST\',\n   headers: {\n        \'Accept\': \'application/json\',\n        \'Content-Type\': \'application/json\'\n   },\n   body: JSON.stringify({\n        name: \'Hubot\',\n        login: \'hubot\',\n   }),\n   credentials: \'same-origin\'\n}\n```\n\n#### Get Response\nrequest return response in `Promise`,if request success `Promise` will resolve json data,if will reject a `SpringRequest` object will `SpringRequest.error` store error reason\n\n##### send request and get response data\n```js\nlet classroom = new Classroom({name: \'D1143\'});\nlet request;\nclassroom.save().then(function () {\n    request = spring.get(`${Classroom.entityBaseURL()}/${classroom.id}`);\n    return request.send();\n}).then(json=> {\n    assert.equal(json.constructor, Object);\n    assert.equal(json.name, \'D1143\');\n    assert.deepEqual(json, request.responseData);\n}).catch(err=> {\n    done(err);\n});\n```\n\n##### follow links\n```js\nlet student = new Student({name: \'吴浩麟\', age: 23});\nlet academy = new Academy({name: \'计算机学院\'});\nstudent.set(\'academy\', academy);\nstudent.save().then(()=> {\n    return spring.get(`${Student.entityBaseURL()}/${student.id}`).follow([\'self\', \'academy\', \'self\', \'self\']);\n}).then((json)=> {\n    assert.equal(json.name, \'计算机学院\');\n}).catch(err=> {\n    done(err);\n});\n```\n\n##### fetch global hook\n\nbefore send fetch request\n```js\nlet flag = \'old\';\nlet request = spring.get(spring.requestConfig.baseURL);\nspring.requestConfig.fetchStartHook = function (req) {\n    assert.equal(req, request);\n    flag = \'new\';\n};\nrequest.send().then(()=> {\n    assert.equal(flag, \'new\');\n}).catch(err=> {\n    done(err);\n});\n```\n\nfetch request is finished\n```js\nlet flag = \'old\';\nlet request = spring.get(spring.requestConfig.baseURL);\nspring.requestConfig.fetchEndHook = function (req) {\n    assert.equal(req, request);\n    flag = \'new\';\n};\nrequest.send().then(()=> {\n    assert.equal(flag, \'new\');\n}).catch(err=> {\n    done(err);\n});\n```\n\n## Entity\n\n##### extend\nget a class by entity path name.\n```js\n//by extend function\nlet Student = spring.extend(\'students\');\nlet Academy = spring.extend(\'academies\');\nlet Classroom = spring.extend(\'classrooms\');\n```\n```typescript\n//by typescript extend\nimport * as spring from \'./index\'\nimport * as assert from \'assert\';\nclass Student extends spring.Entity {\n\n    get name():string {\n        return this.get(\'name\');\n    }\n\n    set name(name:string) {\n        this.set(\'name\', name);\n    }\n\n    hi():string {\n        return `${this.name}:${this.get(\'age\')}`;\n    }\n}\nStudent.entityName = \'students\';\n\n//use it\nlet student = new Student({\n    name: \'Hal\',\n    age: 23\n});\nassert.equal(student.name, \'Hal\');\nassert.equal(student.hi(), \'Hal:23\');\n```\n\n##### config entity\n```js\nconfig = {\n    /**\n     * spring-data-rest-base-path config\n     * @type {string}\n     */\n    restBaseURL: \'\'\n};\n\n```\n\n##### create entity\nclass ref to spring data entity,use entity class to make a new entity instance and then create it on service.\n```js\nlet student = new Student();\nstudent.set(\'name\', \'Tom\');\nstudent.save().then(()=> {\n    assert(student.id != null);\n    return spring.get(`${Student.entityBaseURL()}/${student.id}`).send();\n}).then((json)=> {\n    assert.equal(json.name, \'Tom\');\n}).catch(err=> {\n    done(err);\n})\n```\n\n##### id\nthe entity instance\'s id.\nfor a existed entity set instance\'s id then you can use instance\n- `fetch` method to fetch entity\'s data\n- `save` method to update entity\'s updated properties\n- `remove` method to delete this entity\n```js\nlet student = new Student();\nstudent.id = 26;\n```\n\n##### update entity\nif a entity instance has id attr,and use entity\'s `set(key,value)` method update attr,then can call entity\'s `save()` method to patch update change to service.\n```js\nlet academy = new Academy({name: \'Math\'});\nacademy.save().then(()=> {\n    academy.set(\'name\', \'Physics\');\n    return academy.save();\n}).then(()=> {\n    assert.deepEqual(academy.get(\'name\'), \'Physics\');\n}).catch(err=> {\n    done(err);\n})\n```\n\n##### save or update\ncreate or update entity\nif id properties is set,then will send HTTP PATCH request to update an entity(will watch change in data properties to track change fields)\nif id is null,then will send HTTP POST request to create an entity.\nif entity.properties is an instance of Entity or Entity[],then entity.properties.save() will also call,which mean entity\'s all Entity attr will auto save()\n\n##### track modify fields\nevery Entity instance has attr `modifyFields` fields name array,which store field has been changed.\nwhen update modify to service, `modifyFields` is used to optimize a mini `PATCH` request but send whole attr.\nwhen call Entity\'s `set` method,will compare olaValue and newValue,if value is equal then not append filed name to modifyFields.\n\n##### remove entity\nuse entity\'s `remove()` method to remove this entity in service.\n```js\nlet student = new Student();\nstudent.save().then(()=> {\n    return student.remove();\n}).then(()=> {\n    return Student.findOne(student.id);\n}).catch(err=> {\n    assert.equal(err.response.status, 404);\n});\n```\nEntity Entity also has a static method to remove an entity by id\n```js\nStudent.remove(42).then(()=>{},err=>{})\n```\n\n##### fetch data\nentity\'s data properties store in data\n```js\nlet name = \'Ace\';\nlet age = 20;\nlet ace = new Student({name: name, age: age});\nlet student = new Student();\nace.save().then(()=> {\n    student.id = ace.id;\n    return student.fetch();\n}).then(json=> {\n    assert.equal(json.name, name);\n    assert.equal(json.age, age);\n    assert.equal(student.get(\'name\'), name);\n    assert.equal(student.get(\'age\'), age);\n}).catch(err=> {\n    done(err);\n});\n```\n\n##### follow\nsend request follow this entity\'s _links\'s href\n```js\nlet student = new Student({name: \'吴浩麟\', age: 23});\nlet academy = new Academy({name: \'计算机学院\'});\nstudent.set(\'academy\', academy);\nstudent.save().then(()=> {\n    return student.follow([\'academy\']);\n}).then((json)=> {\n    assert.equal(json.name, \'计算机学院\');\n}).catch(err=> {\n    done(err);\n});\n```\n\n##### fetch relation property\nfetch relation property and store response value in entity\'s data attr,relation property is an instance of Entity.\nafter fetch you can get relation property by `entity.get(propertyName)`\n```js\nlet academy = new Academy({name: \'CS\'});\nlet student = new Student({name: \'a\', academy: academy});\nstudent.save().then(()=> {\n    return Student.findOne(student.id);\n}).then(stu=> {\n    student = stu as Student;\n    return stu.fetchProperty(\'academy\', Academy);\n}).then((academy)=> {\n    assert.equal(student.get(\'academy\'), academy);\n    assert(academy instanceof Academy);\n    assert.equal(academy.get(\'name\'), \'CS\');\n})\n```\n\n##### fetch array type relation property\nfetch relation property and store response value in entity\'s data attr,relation property is an Entity array\nafter fetch you can get relation property by `entity.get(propertyName)`\n```js\nlet classroom = new Classroom({name: \'java\'});\nlet student = new Student({name: \'a\', classrooms: [classroom]});\nstudent.save().then(()=> {\n    return Student.findOne(student.id);\n}).then(stu=> {\n    student = stu as Student;\n    return stu.fetchArrayProperty(\'classrooms\', Classroom);\n}).then(classrooms=> {\n    assert.deepEqual(student.get(\'classrooms\'), classrooms);\n    assert.equal(classrooms.length, 1);\n    assert.equal(classrooms[0].get(\'name\'), \'java\');\n})\n```\n\n#### Entity static methods\n\n##### findOne\nget an entity instance by id\n```js\nlet classRoom = new Classroom({name: \'东16412\'});\nclassRoom.save().then(()=> {\n    return Classroom.findOne(classRoom.id);\n}).then(entity=> {\n    assert.equal(entity.get(\'name\'), \'东16412\');\n}).catch(err=> {\n    done(err);\n});\n```\nget an not exist instance will reject 404 err\n```js\nStudent.findOne(\'404404\').then(()=> {\n    done(\'should be 404 error\');\n}).catch(req=> {\n    assert.equal(req.response.status, 404);\n})\n```\nsupport projection\n```js\nlet student = new Student({name: \'HalWu\', age: 23});\nstudent.save().then(()=> {\n    return Student.findOne(student.id, {projection: \'NoAge\'});\n}).then(entity=> {\n    assert.equal(entity.get(\'name\'), \'HalWu\');\n    assert.equal(entity.get(\'age\'), null);\n}).catch(err=> {\n    done(err);\n})\n```\n\n##### findAll\ncollection resource with page and sort.\nReturns all entities the repository servers through its findAll(…) method. If the repository is a paging repository we include the pagination links if necessary and additional page metadata.*\nreturn entity array has `page` attr patch form response json data\'s page info\n- @param {number} opts.page the page number to access (0 indexed, defaults to 0).\n- @param {number} opts.size the page size requested (defaults to 20).\n- @param {string} opts.sort a collection of sort directives in the format ($propertyName,)+[asc|desc]?\n```js\nlet size = 13;\nlet pageIndex = 1;\nStudent.findAll({page: pageIndex, size: size, sort: \'age,desc\'}).then(function (jsonArr) {\n    assert(Array.isArray(jsonArr));\n    assert.equal(jsonArr.length, size);\n    assert.equal(spring.extend.isEntity(jsonArr[0]), true);\n    assert.equal(jsonArr[0].constructor, Student);\n    assert.equal(arr[\'page\'], {size: size, totalElements: 1, totalPages: 1, number: 0});\n    for (let i = 1; i < size - 2; i++) {\n        assert.equal(jsonArr[i].get(\'age\') > jsonArr[i + 1].get(\'age\'), true);\n        assert.equal(jsonArr[i - 1].get(\'age\') > jsonArr[i].get(\'age\'), true);\n    }\n}).catch(req=> {\n    done(req);\n});\n```\n\n##### search\nsearch resource if the backing repository exposes query methods.\ncall query methods exposed by a repository. The path and name of the query method resources can be modified using @RestResource on the method declaration.\nreturn entity array has `page` attr patch form response json data\'s page info\n- @param {string} searchPath spring data rest searchMethod path string\n- @param {Object} opts search params, If the query method has pagination capabilities (indicated in the URI template pointing to the resource) the resource takes the following parameters:\n- @param {number} opts.page the page number to access (0 indexed, defaults to 0).\n- @param {number} opts.size the page size requested (defaults to 20).\n- @param {string} opts.sort a collection of sort directives in the format ($propertyName,)+[asc|desc]?\n```js\nStudent.search(\'ageGreaterThan\', {age: 1013, page: 1, size: 5, sort: \'age,desc\'}).then(entityList=> {\n    assert.equal(entityList.length, 5);\n    for (var i = 0; i < entityList.length - 2; i++) {\n        assert(entityList[i].get(\'age\') > entityList[i + 1].get(\'age\'));\n    }\n}).catch(err=> {\n    done(err);\n});\n```\n\n##### exposeProperty\nexpose entity instance properties in _data to entity itself use Object.defineProperty getter and setter\nafter expose,you can access property in entity by entity.property rather than access by entity.data().property.\nexample:\n```js\nlet StudentX = spring.extend(\'students\');\nStudentX.exposeProperty(\'name\');\nStudentX.exposeProperty(\'age\');\nlet student = new StudentX({\n    name: \'hal\'\n});\nassert.equal(student[\'name\'], \'hal\');\nstudent[\'age\'] = 23;\nassert.equal(student.get(\'age\'), 23);\n```\nimplements source code:\n```js\nObject.defineProperty(this.prototype, propertyName, {\n    get: function () {\n        return this.get(propertyName);\n    },\n    set: function (value) {\n        this.set(propertyName, value);\n    },\n    enumerable: true\n})\n```\n\n## Error Handle\nall error will be reject by return promise,and the error object is instance of `SpringRequest` will `SpringRequest.error` properties store error reason\n```js\nStudent.findOne(404).then(()=>{}).catch(req=>{\n    console.error(req.error);\n    console.log(req.response.status);\n    console.log(req.response.statusText);\n})\n```\n\n## Example Code\n- unit test source code [javascript,typescript](https://github.com/gwuhaolin/spring-data-rest-js/tree/master/test) [java](https://github.com/gwuhaolin/spring-data-rest-js-backend)\n- real app [typescript](https://github.com/gwuhaolin/ourapp-web) [java](https://github.com/gwuhaolin/ourapp-backend)\n\n### [API Doc](http://gwuhaolin.github.io/spring-data-rest-js/)\n\n## Browser Support\nthis lib use es6 some feature:\n- Promise [doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  [polyfill](https://github.com/stefanpenner/es6-promise)\n- fetch [doc](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)  [polyfill](https://github.com/github/fetch)\n\nfor browser use, be sure browser must support this,in old browser you should include polyfill.\nrequire es6 `Object.assign` and `Promise`,this lib build on the top of es6 fetch API.\nIn Node.js env,will use [node-fetch](https://github.com/bitinn/node-fetch) as fetch polyfill.\n\n## Contributing\n##### dev\nthis lib write with typescript, run `typings install` to install require typescript d.ts file, edit *.ts file then test it,\n\n##### test\ntest with `mocha`,run `npm run test` to test it\n\n##### commit and release\nafter test success,run `sh ./release.sh` to commit it to github and npm.\n\n##### require\n- spring java backend service [java code](https://github.com/gwuhaolin/spring-data-rest-js-backend) for test use\n- **tsc** to compile typescript file\n- **webpack** for pack commonjs to browser\n- **mocha** for test\n- **typings** for install require typescript d.ts file\n- **typedoc** for build API doc\n\n## License\n[MIT](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2016 HalWu\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: 'ca32a00361c162889fcf8ae9a2fc6fa5d2cbfb4c',
21 silly publish   bugs: { url: 'https://github.com/gwuhaolin/spring-data-rest-js/issues' },
21 silly publish   homepage: 'https://github.com/gwuhaolin/spring-data-rest-js#readme',
21 silly publish   _id: 'spring-data-rest-js@0.2.19',
21 silly publish   _shasum: '986f66518a4f2bd0e101f1da79e65bfd83afe1cd',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name spring-data-rest-js
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'spring-data-rest-js',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   name: 'spring-data-rest-js',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/spring-data-rest-js
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/wuhaolin/.npm/spring-data-rest-js/0.2.19/package.tgz
30 verbose request uri https://registry.npmjs.org/spring-data-rest-js
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 1:05:24 PM
33 verbose request using bearer token for auth
34 verbose request id f57479bd4e3f4ed2
35 http request PUT https://registry.npmjs.org/spring-data-rest-js
36 http 403 https://registry.npmjs.org/spring-data-rest-js
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '96',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Sat, 09 Jul 2016 05:05:51 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-itm7424-ITM',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1468040737.732282,VS0,VE13393',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating /Users/wuhaolin/.npm/registry.npmjs.org/spring-data-rest-js on PUT
39 error publish Failed PUT 403
40 verbose stack Error: "You cannot publish over the previously published version 0.2.19." : spring-data-rest-js
40 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
40 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
40 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:200:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1067:10)
40 verbose stack     at emitOne (events.js:101:20)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:988:12)
41 verbose statusCode 403
42 verbose pkgid spring-data-rest-js
43 verbose cwd /Users/wuhaolin/WebstormProjects/spring-data-rest-js
44 error Darwin 15.6.0
45 error argv "/usr/local/Cellar/node/6.2.2/bin/node" "/usr/local/bin/npm" "publish"
46 error node v6.2.2
47 error npm  v3.9.5
48 error code E403
49 error "You cannot publish over the previously published version 0.2.19." : spring-data-rest-js
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
